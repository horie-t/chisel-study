;buildInfoPackage: chisel3, version: 3.1.8, scalaVersion: 2.11.12, sbtVersion: 1.1.1, builtAtString: 2019-07-08 17:44:42.884, builtAtMillis: 1562607882884
circuit Crawler : 
  module Mcp3008 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip config : {flip ready : UInt<1>, valid : UInt<1>, bits : UInt<4>}, data : {valid : UInt<1>, bits : UInt<10>}, spi : {nCs : UInt<1>, sclk : UInt<1>, mosi : UInt<1>, flip miso : UInt<1>}}
    
    reg state : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[Crawler.scala 25:22]
    reg value : UInt<6>, clock with : (reset => (reset, UInt<6>("h00"))) @[Counter.scala 26:33]
    when UInt<1>("h01") : @[Counter.scala 63:17]
      node _T_34 = eq(value, UInt<6>("h031")) @[Counter.scala 34:24]
      node _T_36 = add(value, UInt<1>("h01")) @[Counter.scala 35:22]
      node _T_37 = tail(_T_36, 1) @[Counter.scala 35:22]
      value <= _T_37 @[Counter.scala 35:13]
      when _T_34 : @[Counter.scala 37:21]
        value <= UInt<1>("h00") @[Counter.scala 37:29]
        skip @[Counter.scala 37:21]
      skip @[Counter.scala 63:17]
    node sclkPhaseChange = and(UInt<1>("h01"), _T_34) @[Counter.scala 64:20]
    reg sclk : UInt<1>, clock with : (reset => (reset, UInt<1>("h01"))) @[Crawler.scala 28:21]
    node _T_41 = eq(state, UInt<3>("h00")) @[Crawler.scala 29:15]
    node _T_42 = and(_T_41, io.config.valid) @[Crawler.scala 29:25]
    when _T_42 : @[Crawler.scala 29:45]
      sclk <= UInt<1>("h00") @[Crawler.scala 30:10]
      skip @[Crawler.scala 29:45]
    else : @[Crawler.scala 31:52]
      node _T_44 = neq(state, UInt<3>("h00")) @[Crawler.scala 31:22]
      node _T_45 = and(_T_44, sclkPhaseChange) @[Crawler.scala 31:32]
      when _T_45 : @[Crawler.scala 31:52]
        node _T_46 = not(sclk) @[Crawler.scala 32:13]
        sclk <= _T_46 @[Crawler.scala 32:10]
        skip @[Crawler.scala 31:52]
    reg config : UInt<4>, clock with : (reset => (reset, UInt<4>("h00"))) @[Crawler.scala 36:23]
    wire _T_62 : UInt<1>[10] @[Crawler.scala 38:37]
    _T_62[0] <= UInt<1>("h00") @[Crawler.scala 38:37]
    _T_62[1] <= UInt<1>("h00") @[Crawler.scala 38:37]
    _T_62[2] <= UInt<1>("h00") @[Crawler.scala 38:37]
    _T_62[3] <= UInt<1>("h00") @[Crawler.scala 38:37]
    _T_62[4] <= UInt<1>("h00") @[Crawler.scala 38:37]
    _T_62[5] <= UInt<1>("h00") @[Crawler.scala 38:37]
    _T_62[6] <= UInt<1>("h00") @[Crawler.scala 38:37]
    _T_62[7] <= UInt<1>("h00") @[Crawler.scala 38:37]
    _T_62[8] <= UInt<1>("h00") @[Crawler.scala 38:37]
    _T_62[9] <= UInt<1>("h00") @[Crawler.scala 38:37]
    reg receiveValue : UInt<1>[10], clock with : (reset => (reset, _T_62)) @[Crawler.scala 38:29]
    reg received : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[Crawler.scala 39:25]
    reg sendCount : UInt<2>, clock with : (reset => (reset, UInt<2>("h00"))) @[Crawler.scala 44:26]
    reg receiveCount : UInt<4>, clock with : (reset => (reset, UInt<4>("h00"))) @[Crawler.scala 45:29]
    node changeState = and(sclkPhaseChange, sclk) @[Crawler.scala 47:37]
    node _T_139 = eq(state, UInt<3>("h00")) @[Crawler.scala 48:15]
    when _T_139 : @[Crawler.scala 48:26]
      when io.config.valid : @[Crawler.scala 49:28]
        state <= UInt<3>("h01") @[Crawler.scala 50:13]
        config <= io.config.bits @[Crawler.scala 51:14]
        received <= UInt<1>("h00") @[Crawler.scala 52:16]
        skip @[Crawler.scala 49:28]
      skip @[Crawler.scala 48:26]
    else : @[Crawler.scala 54:29]
      when changeState : @[Crawler.scala 54:29]
        node _T_141 = eq(state, UInt<3>("h01")) @[Crawler.scala 55:17]
        when _T_141 : @[Crawler.scala 55:29]
          state <= UInt<3>("h02") @[Crawler.scala 56:13]
          sendCount <= UInt<1>("h00") @[Crawler.scala 57:17]
          skip @[Crawler.scala 55:29]
        else : @[Crawler.scala 58:35]
          node _T_143 = eq(state, UInt<3>("h02")) @[Crawler.scala 58:24]
          when _T_143 : @[Crawler.scala 58:35]
            node _T_145 = eq(sendCount, UInt<2>("h03")) @[Crawler.scala 59:23]
            when _T_145 : @[Crawler.scala 59:32]
              state <= UInt<3>("h03") @[Crawler.scala 60:15]
              skip @[Crawler.scala 59:32]
            else : @[Crawler.scala 61:20]
              node _T_147 = add(sendCount, UInt<1>("h01")) @[Crawler.scala 62:32]
              node _T_148 = tail(_T_147, 1) @[Crawler.scala 62:32]
              sendCount <= _T_148 @[Crawler.scala 62:19]
              skip @[Crawler.scala 61:20]
            skip @[Crawler.scala 58:35]
          else : @[Crawler.scala 64:39]
            node _T_149 = eq(state, UInt<3>("h03")) @[Crawler.scala 64:24]
            when _T_149 : @[Crawler.scala 64:39]
              state <= UInt<3>("h04") @[Crawler.scala 65:13]
              skip @[Crawler.scala 64:39]
            else : @[Crawler.scala 66:38]
              node _T_150 = eq(state, UInt<3>("h04")) @[Crawler.scala 66:24]
              when _T_150 : @[Crawler.scala 66:38]
                state <= UInt<3>("h05") @[Crawler.scala 67:13]
                receiveCount <= UInt<1>("h00") @[Crawler.scala 68:20]
                skip @[Crawler.scala 66:38]
              else : @[Crawler.scala 69:38]
                node _T_152 = eq(state, UInt<3>("h05")) @[Crawler.scala 69:24]
                when _T_152 : @[Crawler.scala 69:38]
                  node _T_154 = eq(receiveCount, UInt<4>("h09")) @[Crawler.scala 70:26]
                  when _T_154 : @[Crawler.scala 70:35]
                    state <= UInt<3>("h06") @[Crawler.scala 71:15]
                    skip @[Crawler.scala 70:35]
                  else : @[Crawler.scala 72:20]
                    node _T_156 = add(receiveCount, UInt<1>("h01")) @[Crawler.scala 73:38]
                    node _T_157 = tail(_T_156, 1) @[Crawler.scala 73:38]
                    receiveCount <= _T_157 @[Crawler.scala 73:22]
                    received <= UInt<1>("h01") @[Crawler.scala 74:18]
                    skip @[Crawler.scala 72:20]
                  skip @[Crawler.scala 69:38]
                else : @[Crawler.scala 76:35]
                  node _T_159 = eq(state, UInt<3>("h06")) @[Crawler.scala 76:24]
                  when _T_159 : @[Crawler.scala 76:35]
                    state <= UInt<3>("h00") @[Crawler.scala 77:13]
                    skip @[Crawler.scala 76:35]
        skip @[Crawler.scala 54:29]
    node _T_160 = eq(state, UInt<3>("h05")) @[Crawler.scala 84:15]
    node _T_162 = eq(sclk, UInt<1>("h00")) @[Crawler.scala 84:50]
    node _T_163 = and(sclkPhaseChange, _T_162) @[Crawler.scala 84:48]
    node _T_164 = and(_T_160, _T_163) @[Crawler.scala 84:28]
    when _T_164 : @[Crawler.scala 84:58]
      receiveValue[receiveCount] <= io.spi.miso @[Crawler.scala 85:32]
      skip @[Crawler.scala 84:58]
    node _T_168 = eq(state, UInt<3>("h00")) @[Crawler.scala 91:28]
    io.config.ready <= _T_168 @[Crawler.scala 91:19]
    io.data.valid <= received @[Crawler.scala 93:17]
    node _T_169 = cat(receiveValue[1], receiveValue[0]) @[Crawler.scala 94:46]
    node _T_170 = cat(receiveValue[4], receiveValue[3]) @[Crawler.scala 94:46]
    node _T_171 = cat(_T_170, receiveValue[2]) @[Crawler.scala 94:46]
    node _T_172 = cat(_T_171, _T_169) @[Crawler.scala 94:46]
    node _T_173 = cat(receiveValue[6], receiveValue[5]) @[Crawler.scala 94:46]
    node _T_174 = cat(receiveValue[9], receiveValue[8]) @[Crawler.scala 94:46]
    node _T_175 = cat(_T_174, receiveValue[7]) @[Crawler.scala 94:46]
    node _T_176 = cat(_T_175, _T_173) @[Crawler.scala 94:46]
    node _T_177 = cat(_T_176, _T_172) @[Crawler.scala 94:46]
    node _T_178 = bits(_T_177, 7, 0) @[Bitwise.scala 109:18]
    node _T_181 = shl(UInt<4>("h0f"), 4) @[Bitwise.scala 102:47]
    node _T_182 = xor(UInt<8>("h0ff"), _T_181) @[Bitwise.scala 102:21]
    node _T_183 = shr(_T_178, 4) @[Bitwise.scala 103:21]
    node _T_184 = and(_T_183, _T_182) @[Bitwise.scala 103:31]
    node _T_185 = bits(_T_178, 3, 0) @[Bitwise.scala 103:46]
    node _T_186 = shl(_T_185, 4) @[Bitwise.scala 103:65]
    node _T_187 = not(_T_182) @[Bitwise.scala 103:77]
    node _T_188 = and(_T_186, _T_187) @[Bitwise.scala 103:75]
    node _T_189 = or(_T_184, _T_188) @[Bitwise.scala 103:39]
    node _T_190 = bits(_T_182, 5, 0) @[Bitwise.scala 102:28]
    node _T_191 = shl(_T_190, 2) @[Bitwise.scala 102:47]
    node _T_192 = xor(_T_182, _T_191) @[Bitwise.scala 102:21]
    node _T_193 = shr(_T_189, 2) @[Bitwise.scala 103:21]
    node _T_194 = and(_T_193, _T_192) @[Bitwise.scala 103:31]
    node _T_195 = bits(_T_189, 5, 0) @[Bitwise.scala 103:46]
    node _T_196 = shl(_T_195, 2) @[Bitwise.scala 103:65]
    node _T_197 = not(_T_192) @[Bitwise.scala 103:77]
    node _T_198 = and(_T_196, _T_197) @[Bitwise.scala 103:75]
    node _T_199 = or(_T_194, _T_198) @[Bitwise.scala 103:39]
    node _T_200 = bits(_T_192, 6, 0) @[Bitwise.scala 102:28]
    node _T_201 = shl(_T_200, 1) @[Bitwise.scala 102:47]
    node _T_202 = xor(_T_192, _T_201) @[Bitwise.scala 102:21]
    node _T_203 = shr(_T_199, 1) @[Bitwise.scala 103:21]
    node _T_204 = and(_T_203, _T_202) @[Bitwise.scala 103:31]
    node _T_205 = bits(_T_199, 6, 0) @[Bitwise.scala 103:46]
    node _T_206 = shl(_T_205, 1) @[Bitwise.scala 103:65]
    node _T_207 = not(_T_202) @[Bitwise.scala 103:77]
    node _T_208 = and(_T_206, _T_207) @[Bitwise.scala 103:75]
    node _T_209 = or(_T_204, _T_208) @[Bitwise.scala 103:39]
    node _T_210 = bits(_T_177, 9, 8) @[Bitwise.scala 109:44]
    node _T_211 = bits(_T_210, 0, 0) @[Bitwise.scala 109:18]
    node _T_212 = bits(_T_210, 1, 1) @[Bitwise.scala 109:44]
    node _T_213 = cat(_T_211, _T_212) @[Cat.scala 30:58]
    node _T_214 = cat(_T_209, _T_213) @[Cat.scala 30:58]
    io.data.bits <= _T_214 @[Crawler.scala 94:16]
    io.spi.sclk <= sclk @[Crawler.scala 96:15]
    node _T_215 = eq(state, UInt<3>("h00")) @[Crawler.scala 97:23]
    node _T_216 = eq(state, UInt<3>("h06")) @[Crawler.scala 97:42]
    node _T_217 = or(_T_215, _T_216) @[Crawler.scala 97:33]
    io.spi.nCs <= _T_217 @[Crawler.scala 97:14]
    io.spi.mosi <= UInt<1>("h01") @[Crawler.scala 99:15]
    node _T_219 = eq(state, UInt<3>("h02")) @[Crawler.scala 100:15]
    when _T_219 : @[Crawler.scala 100:26]
      node _T_220 = bits(config, 1, 0) @[Bitwise.scala 109:18]
      node _T_221 = bits(_T_220, 0, 0) @[Bitwise.scala 109:18]
      node _T_222 = bits(_T_220, 1, 1) @[Bitwise.scala 109:44]
      node _T_223 = cat(_T_221, _T_222) @[Cat.scala 30:58]
      node _T_224 = bits(config, 3, 2) @[Bitwise.scala 109:44]
      node _T_225 = bits(_T_224, 0, 0) @[Bitwise.scala 109:18]
      node _T_226 = bits(_T_224, 1, 1) @[Bitwise.scala 109:44]
      node _T_227 = cat(_T_225, _T_226) @[Cat.scala 30:58]
      node _T_228 = cat(_T_223, _T_227) @[Cat.scala 30:58]
      node _T_229 = dshr(_T_228, sendCount) @[Crawler.scala 101:35]
      node _T_230 = bits(_T_229, 0, 0) @[Crawler.scala 101:35]
      io.spi.mosi <= _T_230 @[Crawler.scala 101:17]
      skip @[Crawler.scala 100:26]
    
  module Drv8835SingleDrive : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip dir : UInt<1>, flip speed : UInt<8>, driverIn1 : UInt<1>, driverIn2 : UInt<1>}
    
    reg value : UInt<14>, clock with : (reset => (reset, UInt<14>("h00"))) @[Counter.scala 26:33]
    when UInt<1>("h01") : @[Counter.scala 63:17]
      node _T_17 = eq(value, UInt<14>("h030d3")) @[Counter.scala 34:24]
      node _T_19 = add(value, UInt<1>("h01")) @[Counter.scala 35:22]
      node _T_20 = tail(_T_19, 1) @[Counter.scala 35:22]
      value <= _T_20 @[Counter.scala 35:13]
      when _T_17 : @[Counter.scala 37:21]
        value <= UInt<1>("h00") @[Counter.scala 37:29]
        skip @[Counter.scala 37:21]
      skip @[Counter.scala 63:17]
    node changePulse = and(UInt<1>("h01"), _T_17) @[Counter.scala 64:20]
    reg value_1 : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[Counter.scala 26:33]
    when changePulse : @[Counter.scala 63:17]
      node _T_25 = eq(value_1, UInt<3>("h07")) @[Counter.scala 34:24]
      node _T_27 = add(value_1, UInt<1>("h01")) @[Counter.scala 35:22]
      node _T_28 = tail(_T_27, 1) @[Counter.scala 35:22]
      value_1 <= _T_28 @[Counter.scala 35:13]
      skip @[Counter.scala 63:17]
    node widthWrap = and(changePulse, _T_25) @[Counter.scala 64:20]
    node _T_30 = eq(io.speed, UInt<1>("h00")) @[Crawler.scala 125:18]
    when _T_30 : @[Crawler.scala 125:27]
      io.driverIn1 <= UInt<1>("h00") @[Crawler.scala 126:18]
      io.driverIn2 <= UInt<1>("h00") @[Crawler.scala 127:18]
      skip @[Crawler.scala 125:27]
    else : @[Crawler.scala 128:16]
      when io.dir : @[Crawler.scala 129:19]
        node _T_34 = sub(io.speed, UInt<1>("h01")) @[Crawler.scala 130:46]
        node _T_35 = asUInt(_T_34) @[Crawler.scala 130:46]
        node _T_36 = tail(_T_35, 1) @[Crawler.scala 130:46]
        node _T_37 = leq(value_1, _T_36) @[Crawler.scala 130:34]
        io.driverIn1 <= _T_37 @[Crawler.scala 130:20]
        io.driverIn2 <= UInt<1>("h00") @[Crawler.scala 131:20]
        skip @[Crawler.scala 129:19]
      else : @[Crawler.scala 132:18]
        io.driverIn1 <= UInt<1>("h00") @[Crawler.scala 133:20]
        node _T_41 = sub(io.speed, UInt<1>("h01")) @[Crawler.scala 134:46]
        node _T_42 = asUInt(_T_41) @[Crawler.scala 134:46]
        node _T_43 = tail(_T_42, 1) @[Crawler.scala 134:46]
        node _T_44 = leq(value_1, _T_43) @[Crawler.scala 134:34]
        io.driverIn2 <= _T_44 @[Crawler.scala 134:20]
        skip @[Crawler.scala 132:18]
      skip @[Crawler.scala 128:16]
    
  module Drv8835SingleDrive_1 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip dir : UInt<1>, flip speed : UInt<8>, driverIn1 : UInt<1>, driverIn2 : UInt<1>}
    
    reg value : UInt<14>, clock with : (reset => (reset, UInt<14>("h00"))) @[Counter.scala 26:33]
    when UInt<1>("h01") : @[Counter.scala 63:17]
      node _T_17 = eq(value, UInt<14>("h030d3")) @[Counter.scala 34:24]
      node _T_19 = add(value, UInt<1>("h01")) @[Counter.scala 35:22]
      node _T_20 = tail(_T_19, 1) @[Counter.scala 35:22]
      value <= _T_20 @[Counter.scala 35:13]
      when _T_17 : @[Counter.scala 37:21]
        value <= UInt<1>("h00") @[Counter.scala 37:29]
        skip @[Counter.scala 37:21]
      skip @[Counter.scala 63:17]
    node changePulse = and(UInt<1>("h01"), _T_17) @[Counter.scala 64:20]
    reg value_1 : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[Counter.scala 26:33]
    when changePulse : @[Counter.scala 63:17]
      node _T_25 = eq(value_1, UInt<3>("h07")) @[Counter.scala 34:24]
      node _T_27 = add(value_1, UInt<1>("h01")) @[Counter.scala 35:22]
      node _T_28 = tail(_T_27, 1) @[Counter.scala 35:22]
      value_1 <= _T_28 @[Counter.scala 35:13]
      skip @[Counter.scala 63:17]
    node widthWrap = and(changePulse, _T_25) @[Counter.scala 64:20]
    node _T_30 = eq(io.speed, UInt<1>("h00")) @[Crawler.scala 125:18]
    when _T_30 : @[Crawler.scala 125:27]
      io.driverIn1 <= UInt<1>("h00") @[Crawler.scala 126:18]
      io.driverIn2 <= UInt<1>("h00") @[Crawler.scala 127:18]
      skip @[Crawler.scala 125:27]
    else : @[Crawler.scala 128:16]
      when io.dir : @[Crawler.scala 129:19]
        node _T_34 = sub(io.speed, UInt<1>("h01")) @[Crawler.scala 130:46]
        node _T_35 = asUInt(_T_34) @[Crawler.scala 130:46]
        node _T_36 = tail(_T_35, 1) @[Crawler.scala 130:46]
        node _T_37 = leq(value_1, _T_36) @[Crawler.scala 130:34]
        io.driverIn1 <= _T_37 @[Crawler.scala 130:20]
        io.driverIn2 <= UInt<1>("h00") @[Crawler.scala 131:20]
        skip @[Crawler.scala 129:19]
      else : @[Crawler.scala 132:18]
        io.driverIn1 <= UInt<1>("h00") @[Crawler.scala 133:20]
        node _T_41 = sub(io.speed, UInt<1>("h01")) @[Crawler.scala 134:46]
        node _T_42 = asUInt(_T_41) @[Crawler.scala 134:46]
        node _T_43 = tail(_T_42, 1) @[Crawler.scala 134:46]
        node _T_44 = leq(value_1, _T_43) @[Crawler.scala 134:34]
        io.driverIn2 <= _T_44 @[Crawler.scala 134:20]
        skip @[Crawler.scala 132:18]
      skip @[Crawler.scala 128:16]
    
  module Crawler : 
    input clock : Clock
    input reset : UInt<1>
    output io : {spi : {nCs : UInt<1>, sclk : UInt<1>, mosi : UInt<1>, flip miso : UInt<1>}, drv8835 : {a : {driverIn1 : UInt<1>, driverIn2 : UInt<1>}, b : {driverIn1 : UInt<1>, driverIn2 : UInt<1>}}}
    
    reg value : UInt<27>, clock with : (reset => (reset, UInt<27>("h00"))) @[Counter.scala 26:33]
    when UInt<1>("h01") : @[Counter.scala 63:17]
      node _T_25 = eq(value, UInt<27>("h05f5e0ff")) @[Counter.scala 34:24]
      node _T_27 = add(value, UInt<1>("h01")) @[Counter.scala 35:22]
      node _T_28 = tail(_T_27, 1) @[Counter.scala 35:22]
      value <= _T_28 @[Counter.scala 35:13]
      when _T_25 : @[Counter.scala 37:21]
        value <= UInt<1>("h00") @[Counter.scala 37:29]
        skip @[Counter.scala 37:21]
      skip @[Counter.scala 63:17]
    node measureSig = and(UInt<1>("h01"), _T_25) @[Counter.scala 64:20]
    inst mcp3008 of Mcp3008 @[Crawler.scala 162:23]
    mcp3008.clock <= clock
    mcp3008.reset <= reset
    reg stateMcp3008 : UInt<2>, clock with : (reset => (reset, UInt<2>("h00"))) @[Crawler.scala 167:29]
    wire configChannel1 : UInt<4>
    configChannel1 <= UInt<4>("h08")
    wire configChannel2 : UInt<4>
    configChannel2 <= UInt<4>("h09")
    reg channel1 : UInt<10>, clock with : (reset => (reset, UInt<10>("h00"))) @[Crawler.scala 173:25]
    reg channel2 : UInt<10>, clock with : (reset => (reset, UInt<10>("h00"))) @[Crawler.scala 174:25]
    mcp3008.io.config.bits <= UInt<1>("h00") @[Crawler.scala 177:26]
    mcp3008.io.config.valid <= UInt<1>("h00") @[Crawler.scala 178:27]
    node _T_41 = eq(stateMcp3008, UInt<2>("h00")) @[Crawler.scala 179:22]
    node _T_42 = and(_T_41, measureSig) @[Crawler.scala 179:32]
    when _T_42 : @[Crawler.scala 179:47]
      stateMcp3008 <= UInt<2>("h01") @[Crawler.scala 180:18]
      skip @[Crawler.scala 179:47]
    else : @[Crawler.scala 181:44]
      node _T_43 = eq(stateMcp3008, UInt<2>("h01")) @[Crawler.scala 181:29]
      when _T_43 : @[Crawler.scala 181:44]
        when mcp3008.io.config.ready : @[Crawler.scala 182:36]
          mcp3008.io.config.bits <= configChannel1 @[Crawler.scala 183:30]
          mcp3008.io.config.valid <= UInt<1>("h01") @[Crawler.scala 184:31]
          skip @[Crawler.scala 182:36]
        else : @[Crawler.scala 185:41]
          when mcp3008.io.data.valid : @[Crawler.scala 185:41]
            channel1 <= mcp3008.io.data.bits @[Crawler.scala 186:16]
            stateMcp3008 <= UInt<2>("h02") @[Crawler.scala 187:20]
            skip @[Crawler.scala 185:41]
        skip @[Crawler.scala 181:44]
      else : @[Crawler.scala 189:44]
        node _T_45 = eq(stateMcp3008, UInt<2>("h02")) @[Crawler.scala 189:29]
        when _T_45 : @[Crawler.scala 189:44]
          when mcp3008.io.config.ready : @[Crawler.scala 190:36]
            mcp3008.io.config.bits <= configChannel2 @[Crawler.scala 191:30]
            mcp3008.io.config.valid <= UInt<1>("h01") @[Crawler.scala 192:31]
            skip @[Crawler.scala 190:36]
          else : @[Crawler.scala 193:41]
            when mcp3008.io.data.valid : @[Crawler.scala 193:41]
              channel2 <= mcp3008.io.data.bits @[Crawler.scala 194:16]
              stateMcp3008 <= UInt<2>("h00") @[Crawler.scala 195:20]
              skip @[Crawler.scala 193:41]
          skip @[Crawler.scala 189:44]
    inst motorDriveA of Drv8835SingleDrive @[Crawler.scala 202:27]
    motorDriveA.clock <= clock
    motorDriveA.reset <= reset
    inst motorDriveB of Drv8835SingleDrive_1 @[Crawler.scala 203:27]
    motorDriveB.clock <= clock
    motorDriveB.reset <= reset
    motorDriveA.io.dir <= UInt<1>("h01") @[Crawler.scala 205:22]
    node _T_48 = bits(channel1, 9, 2) @[Crawler.scala 206:35]
    motorDriveA.io.speed <= _T_48 @[Crawler.scala 206:24]
    motorDriveB.io.dir <= UInt<1>("h01") @[Crawler.scala 208:22]
    node _T_50 = bits(channel2, 9, 2) @[Crawler.scala 209:35]
    motorDriveB.io.speed <= _T_50 @[Crawler.scala 209:24]
    mcp3008.io.spi.miso <= io.spi.miso @[Crawler.scala 215:10]
    io.spi.mosi <= mcp3008.io.spi.mosi @[Crawler.scala 215:10]
    io.spi.sclk <= mcp3008.io.spi.sclk @[Crawler.scala 215:10]
    io.spi.nCs <= mcp3008.io.spi.nCs @[Crawler.scala 215:10]
    io.drv8835.a.driverIn1 <= motorDriveA.io.driverIn1 @[Crawler.scala 220:26]
    io.drv8835.a.driverIn2 <= motorDriveA.io.driverIn2 @[Crawler.scala 221:26]
    io.drv8835.b.driverIn1 <= motorDriveB.io.driverIn1 @[Crawler.scala 222:26]
    io.drv8835.b.driverIn2 <= motorDriveB.io.driverIn2 @[Crawler.scala 223:26]
    

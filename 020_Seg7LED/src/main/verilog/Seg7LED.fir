;buildInfoPackage: chisel3, version: 3.1.8, scalaVersion: 2.11.12, sbtVersion: 1.1.1, builtAtString: 2019-07-08 17:44:42.884, builtAtMillis: 1562607882884
circuit Seg7LED : 
  module Seg7LED : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip digits : UInt<4>[4], seg7led : {cathodes : UInt<7>, anodes : UInt<4>}}
    
    reg value : UInt<17>, clock with : (reset => (reset, UInt<17>("h00"))) @[Counter.scala 26:33]
    when UInt<1>("h01") : @[Counter.scala 63:17]
      node _T_31 = eq(value, UInt<17>("h01869f")) @[Counter.scala 34:24]
      node _T_33 = add(value, UInt<1>("h01")) @[Counter.scala 35:22]
      node _T_34 = tail(_T_33, 1) @[Counter.scala 35:22]
      value <= _T_34 @[Counter.scala 35:13]
      when _T_31 : @[Counter.scala 37:21]
        value <= UInt<1>("h00") @[Counter.scala 37:29]
        skip @[Counter.scala 37:21]
      skip @[Counter.scala 63:17]
    node digitChange = and(UInt<1>("h01"), _T_31) @[Counter.scala 64:20]
    reg value_1 : UInt<2>, clock with : (reset => (reset, UInt<2>("h00"))) @[Counter.scala 26:33]
    when digitChange : @[Counter.scala 63:17]
      node _T_39 = eq(value_1, UInt<2>("h03")) @[Counter.scala 34:24]
      node _T_41 = add(value_1, UInt<1>("h01")) @[Counter.scala 35:22]
      node _T_42 = tail(_T_41, 1) @[Counter.scala 35:22]
      value_1 <= _T_42 @[Counter.scala 35:13]
      skip @[Counter.scala 63:17]
    node digitWrap = and(digitChange, _T_39) @[Counter.scala 64:20]
    node _T_46 = eq(io.digits[value_1], UInt<1>("h00")) @[Seg7LED.scala 34:17]
    node _T_49 = eq(io.digits[value_1], UInt<1>("h01")) @[Seg7LED.scala 35:17]
    node _T_52 = eq(io.digits[value_1], UInt<2>("h02")) @[Seg7LED.scala 36:17]
    node _T_55 = eq(io.digits[value_1], UInt<2>("h03")) @[Seg7LED.scala 37:17]
    node _T_58 = eq(io.digits[value_1], UInt<3>("h04")) @[Seg7LED.scala 38:17]
    node _T_61 = eq(io.digits[value_1], UInt<3>("h05")) @[Seg7LED.scala 39:17]
    node _T_64 = eq(io.digits[value_1], UInt<3>("h06")) @[Seg7LED.scala 40:17]
    node _T_67 = eq(io.digits[value_1], UInt<3>("h07")) @[Seg7LED.scala 41:17]
    node _T_70 = eq(io.digits[value_1], UInt<4>("h08")) @[Seg7LED.scala 42:17]
    node _T_73 = eq(io.digits[value_1], UInt<4>("h09")) @[Seg7LED.scala 43:17]
    node _T_76 = eq(io.digits[value_1], UInt<4>("h0a")) @[Seg7LED.scala 44:17]
    node _T_79 = eq(io.digits[value_1], UInt<4>("h0b")) @[Seg7LED.scala 45:17]
    node _T_82 = eq(io.digits[value_1], UInt<4>("h0c")) @[Seg7LED.scala 46:17]
    node _T_85 = eq(io.digits[value_1], UInt<4>("h0d")) @[Seg7LED.scala 47:17]
    node _T_88 = eq(io.digits[value_1], UInt<4>("h0e")) @[Seg7LED.scala 48:17]
    node _T_91 = eq(io.digits[value_1], UInt<4>("h0f")) @[Seg7LED.scala 49:17]
    node _T_93 = mux(_T_91, UInt<4>("h0e"), UInt<7>("h07f")) @[Mux.scala 61:16]
    node _T_94 = mux(_T_88, UInt<3>("h06"), _T_93) @[Mux.scala 61:16]
    node _T_95 = mux(_T_85, UInt<6>("h021"), _T_94) @[Mux.scala 61:16]
    node _T_96 = mux(_T_82, UInt<7>("h046"), _T_95) @[Mux.scala 61:16]
    node _T_97 = mux(_T_79, UInt<2>("h03"), _T_96) @[Mux.scala 61:16]
    node _T_98 = mux(_T_76, UInt<4>("h08"), _T_97) @[Mux.scala 61:16]
    node _T_99 = mux(_T_73, UInt<5>("h010"), _T_98) @[Mux.scala 61:16]
    node _T_100 = mux(_T_70, UInt<1>("h00"), _T_99) @[Mux.scala 61:16]
    node _T_101 = mux(_T_67, UInt<7>("h058"), _T_100) @[Mux.scala 61:16]
    node _T_102 = mux(_T_64, UInt<2>("h02"), _T_101) @[Mux.scala 61:16]
    node _T_103 = mux(_T_61, UInt<5>("h012"), _T_102) @[Mux.scala 61:16]
    node _T_104 = mux(_T_58, UInt<5>("h019"), _T_103) @[Mux.scala 61:16]
    node _T_105 = mux(_T_55, UInt<6>("h030"), _T_104) @[Mux.scala 61:16]
    node _T_106 = mux(_T_52, UInt<6>("h024"), _T_105) @[Mux.scala 61:16]
    node _T_107 = mux(_T_49, UInt<7>("h079"), _T_106) @[Mux.scala 61:16]
    node _T_108 = mux(_T_46, UInt<7>("h040"), _T_107) @[Mux.scala 61:16]
    io.seg7led.cathodes <= _T_108 @[Seg7LED.scala 32:23]
    reg anodes : UInt<4>, clock with : (reset => (reset, UInt<4>("h01"))) @[Seg7LED.scala 51:23]
    when digitChange : @[Seg7LED.scala 52:22]
      node _T_111 = bits(anodes, 2, 0) @[Seg7LED.scala 54:25]
      node _T_112 = bits(anodes, 3, 3) @[Seg7LED.scala 54:39]
      node _T_113 = cat(_T_111, _T_112) @[Cat.scala 30:58]
      anodes <= _T_113 @[Seg7LED.scala 54:12]
      skip @[Seg7LED.scala 52:22]
    io.seg7led.anodes <= anodes @[Seg7LED.scala 56:21]
    

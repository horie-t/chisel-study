;buildInfoPackage: chisel3, version: 3.1.8, scalaVersion: 2.11.12, sbtVersion: 1.1.1, builtAtString: 2019-07-08 17:44:42.884, builtAtMillis: 1562607882884
circuit LCDDisplay : 
  module Debounce : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip in : UInt<1>, out : UInt<1>}
    
    reg value : UInt<25>, clock with : (reset => (reset, UInt<25>("h00"))) @[Counter.scala 26:33]
    when UInt<1>("h01") : @[Counter.scala 63:17]
      node _T_13 = eq(value, UInt<25>("h01312cff")) @[Counter.scala 34:24]
      node _T_15 = add(value, UInt<1>("h01")) @[Counter.scala 35:22]
      node _T_16 = tail(_T_15, 1) @[Counter.scala 35:22]
      value <= _T_16 @[Counter.scala 35:13]
      when _T_13 : @[Counter.scala 37:21]
        value <= UInt<1>("h00") @[Counter.scala 37:29]
        skip @[Counter.scala 37:21]
      skip @[Counter.scala 63:17]
    node enable = and(UInt<1>("h01"), _T_13) @[Counter.scala 64:20]
    reg reg0 : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[Reg.scala 19:20]
    when enable : @[Reg.scala 20:19]
      reg0 <= io.in @[Reg.scala 20:23]
      skip @[Reg.scala 20:19]
    reg reg1 : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[Reg.scala 19:20]
    when enable : @[Reg.scala 20:19]
      reg1 <= reg0 @[Reg.scala 20:23]
      skip @[Reg.scala 20:19]
    node _T_23 = eq(reg1, UInt<1>("h00")) @[Debounce.scala 19:21]
    node _T_24 = and(reg0, _T_23) @[Debounce.scala 19:18]
    node _T_25 = and(_T_24, enable) @[Debounce.scala 19:27]
    io.out <= _T_25 @[Debounce.scala 19:10]
    
  module Debounce_1 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip in : UInt<1>, out : UInt<1>}
    
    reg value : UInt<25>, clock with : (reset => (reset, UInt<25>("h00"))) @[Counter.scala 26:33]
    when UInt<1>("h01") : @[Counter.scala 63:17]
      node _T_13 = eq(value, UInt<25>("h01312cff")) @[Counter.scala 34:24]
      node _T_15 = add(value, UInt<1>("h01")) @[Counter.scala 35:22]
      node _T_16 = tail(_T_15, 1) @[Counter.scala 35:22]
      value <= _T_16 @[Counter.scala 35:13]
      when _T_13 : @[Counter.scala 37:21]
        value <= UInt<1>("h00") @[Counter.scala 37:29]
        skip @[Counter.scala 37:21]
      skip @[Counter.scala 63:17]
    node enable = and(UInt<1>("h01"), _T_13) @[Counter.scala 64:20]
    reg reg0 : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[Reg.scala 19:20]
    when enable : @[Reg.scala 20:19]
      reg0 <= io.in @[Reg.scala 20:23]
      skip @[Reg.scala 20:19]
    reg reg1 : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[Reg.scala 19:20]
    when enable : @[Reg.scala 20:19]
      reg1 <= reg0 @[Reg.scala 20:23]
      skip @[Reg.scala 20:19]
    node _T_23 = eq(reg1, UInt<1>("h00")) @[Debounce.scala 19:21]
    node _T_24 = and(reg0, _T_23) @[Debounce.scala 19:18]
    node _T_25 = and(_T_24, enable) @[Debounce.scala 19:27]
    io.out <= _T_25 @[Debounce.scala 19:10]
    
  module Debounce_2 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip in : UInt<1>, out : UInt<1>}
    
    reg value : UInt<25>, clock with : (reset => (reset, UInt<25>("h00"))) @[Counter.scala 26:33]
    when UInt<1>("h01") : @[Counter.scala 63:17]
      node _T_13 = eq(value, UInt<25>("h01312cff")) @[Counter.scala 34:24]
      node _T_15 = add(value, UInt<1>("h01")) @[Counter.scala 35:22]
      node _T_16 = tail(_T_15, 1) @[Counter.scala 35:22]
      value <= _T_16 @[Counter.scala 35:13]
      when _T_13 : @[Counter.scala 37:21]
        value <= UInt<1>("h00") @[Counter.scala 37:29]
        skip @[Counter.scala 37:21]
      skip @[Counter.scala 63:17]
    node enable = and(UInt<1>("h01"), _T_13) @[Counter.scala 64:20]
    reg reg0 : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[Reg.scala 19:20]
    when enable : @[Reg.scala 20:19]
      reg0 <= io.in @[Reg.scala 20:23]
      skip @[Reg.scala 20:19]
    reg reg1 : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[Reg.scala 19:20]
    when enable : @[Reg.scala 20:19]
      reg1 <= reg0 @[Reg.scala 20:23]
      skip @[Reg.scala 20:19]
    node _T_23 = eq(reg1, UInt<1>("h00")) @[Debounce.scala 19:21]
    node _T_24 = and(reg0, _T_23) @[Debounce.scala 19:18]
    node _T_25 = and(_T_24, enable) @[Debounce.scala 19:27]
    io.out <= _T_25 @[Debounce.scala 19:10]
    
  module ShiftRegisterPISO : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip d : UInt<8>, flip load : UInt<1>, flip enable : UInt<1>, shiftOut : UInt<1>}
    
    reg reg : UInt<8>, clock with : (reset => (reset, UInt<8>("h00"))) @[ShiftRegister.scala 37:20]
    when io.load : @[ShiftRegister.scala 38:18]
      reg <= io.d @[ShiftRegister.scala 39:9]
      skip @[ShiftRegister.scala 38:18]
    else : @[ShiftRegister.scala 40:27]
      when io.enable : @[ShiftRegister.scala 40:27]
        node _T_15 = bits(reg, 6, 0) @[ShiftRegister.scala 41:19]
        node _T_17 = cat(_T_15, UInt<1>("h01")) @[Cat.scala 30:58]
        reg <= _T_17 @[ShiftRegister.scala 41:9]
        skip @[ShiftRegister.scala 40:27]
    node _T_18 = bits(reg, 7, 7) @[ShiftRegister.scala 44:21]
    io.shiftOut <= _T_18 @[ShiftRegister.scala 44:15]
    
  module Seg7LED : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip digits : UInt<4>[8], seg7led : {cathodes : UInt<7>, decimalPoint : UInt<1>, anodes : UInt<8>}}
    
    reg value : UInt<17>, clock with : (reset => (reset, UInt<17>("h00"))) @[Counter.scala 26:33]
    when UInt<1>("h01") : @[Counter.scala 63:17]
      node _T_41 = eq(value, UInt<17>("h01869f")) @[Counter.scala 34:24]
      node _T_43 = add(value, UInt<1>("h01")) @[Counter.scala 35:22]
      node _T_44 = tail(_T_43, 1) @[Counter.scala 35:22]
      value <= _T_44 @[Counter.scala 35:13]
      when _T_41 : @[Counter.scala 37:21]
        value <= UInt<1>("h00") @[Counter.scala 37:29]
        skip @[Counter.scala 37:21]
      skip @[Counter.scala 63:17]
    node digitChange = and(UInt<1>("h01"), _T_41) @[Counter.scala 64:20]
    reg value_1 : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[Counter.scala 26:33]
    when digitChange : @[Counter.scala 63:17]
      node _T_49 = eq(value_1, UInt<3>("h07")) @[Counter.scala 34:24]
      node _T_51 = add(value_1, UInt<1>("h01")) @[Counter.scala 35:22]
      node _T_52 = tail(_T_51, 1) @[Counter.scala 35:22]
      value_1 <= _T_52 @[Counter.scala 35:13]
      skip @[Counter.scala 63:17]
    node digitWrap = and(digitChange, _T_49) @[Counter.scala 64:20]
    node _T_56 = eq(io.digits[value_1], UInt<1>("h00")) @[Seg7LED.scala 36:17]
    node _T_59 = eq(io.digits[value_1], UInt<1>("h01")) @[Seg7LED.scala 37:17]
    node _T_62 = eq(io.digits[value_1], UInt<2>("h02")) @[Seg7LED.scala 38:17]
    node _T_65 = eq(io.digits[value_1], UInt<2>("h03")) @[Seg7LED.scala 39:17]
    node _T_68 = eq(io.digits[value_1], UInt<3>("h04")) @[Seg7LED.scala 40:17]
    node _T_71 = eq(io.digits[value_1], UInt<3>("h05")) @[Seg7LED.scala 41:17]
    node _T_74 = eq(io.digits[value_1], UInt<3>("h06")) @[Seg7LED.scala 42:17]
    node _T_77 = eq(io.digits[value_1], UInt<3>("h07")) @[Seg7LED.scala 43:17]
    node _T_80 = eq(io.digits[value_1], UInt<4>("h08")) @[Seg7LED.scala 44:17]
    node _T_83 = eq(io.digits[value_1], UInt<4>("h09")) @[Seg7LED.scala 45:17]
    node _T_86 = eq(io.digits[value_1], UInt<4>("h0a")) @[Seg7LED.scala 46:17]
    node _T_89 = eq(io.digits[value_1], UInt<4>("h0b")) @[Seg7LED.scala 47:17]
    node _T_92 = eq(io.digits[value_1], UInt<4>("h0c")) @[Seg7LED.scala 48:17]
    node _T_95 = eq(io.digits[value_1], UInt<4>("h0d")) @[Seg7LED.scala 49:17]
    node _T_98 = eq(io.digits[value_1], UInt<4>("h0e")) @[Seg7LED.scala 50:17]
    node _T_101 = eq(io.digits[value_1], UInt<4>("h0f")) @[Seg7LED.scala 51:17]
    node _T_103 = mux(_T_101, UInt<4>("h0e"), UInt<7>("h07f")) @[Mux.scala 61:16]
    node _T_104 = mux(_T_98, UInt<3>("h06"), _T_103) @[Mux.scala 61:16]
    node _T_105 = mux(_T_95, UInt<6>("h021"), _T_104) @[Mux.scala 61:16]
    node _T_106 = mux(_T_92, UInt<7>("h046"), _T_105) @[Mux.scala 61:16]
    node _T_107 = mux(_T_89, UInt<2>("h03"), _T_106) @[Mux.scala 61:16]
    node _T_108 = mux(_T_86, UInt<4>("h08"), _T_107) @[Mux.scala 61:16]
    node _T_109 = mux(_T_83, UInt<5>("h010"), _T_108) @[Mux.scala 61:16]
    node _T_110 = mux(_T_80, UInt<1>("h00"), _T_109) @[Mux.scala 61:16]
    node _T_111 = mux(_T_77, UInt<7>("h058"), _T_110) @[Mux.scala 61:16]
    node _T_112 = mux(_T_74, UInt<2>("h02"), _T_111) @[Mux.scala 61:16]
    node _T_113 = mux(_T_71, UInt<5>("h012"), _T_112) @[Mux.scala 61:16]
    node _T_114 = mux(_T_68, UInt<5>("h019"), _T_113) @[Mux.scala 61:16]
    node _T_115 = mux(_T_65, UInt<6>("h030"), _T_114) @[Mux.scala 61:16]
    node _T_116 = mux(_T_62, UInt<6>("h024"), _T_115) @[Mux.scala 61:16]
    node _T_117 = mux(_T_59, UInt<7>("h079"), _T_116) @[Mux.scala 61:16]
    node _T_118 = mux(_T_56, UInt<7>("h040"), _T_117) @[Mux.scala 61:16]
    io.seg7led.cathodes <= _T_118 @[Seg7LED.scala 34:23]
    reg anodes : UInt<8>, clock with : (reset => (reset, UInt<8>("h0fe"))) @[Seg7LED.scala 53:23]
    when digitChange : @[Seg7LED.scala 54:22]
      node _T_121 = bits(anodes, 6, 0) @[Seg7LED.scala 56:25]
      node _T_122 = bits(anodes, 7, 7) @[Seg7LED.scala 56:39]
      node _T_123 = cat(_T_121, _T_122) @[Cat.scala 30:58]
      anodes <= _T_123 @[Seg7LED.scala 56:12]
      skip @[Seg7LED.scala 54:22]
    io.seg7led.anodes <= anodes @[Seg7LED.scala 58:21]
    io.seg7led.decimalPoint <= UInt<1>("h01") @[Seg7LED.scala 60:27]
    
  module LCDDisplay : 
    input clock : Clock
    input reset : UInt<1>
    output io : {lcd : {serialClock : UInt<1>, dataCommand : UInt<1>, chipSelect : UInt<1>, masterOutSlaveIn : UInt<1>, flip masterInSlaveOut : UInt<1>, reset : UInt<1>, backLight : UInt<1>}, flip operation : {command : {valid : UInt<1>, bits : UInt<8>}, exec : UInt<1>, reset : UInt<1>}, seg7LED : {cathodes : UInt<7>, decimalPoint : UInt<1>, anodes : UInt<8>}}
    
    reg state : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[LCDDisplay.scala 34:22]
    inst Debounce of Debounce @[Debounce.scala 26:26]
    Debounce.clock <= clock
    Debounce.reset <= reset
    Debounce.io.in <= io.operation.exec @[Debounce.scala 27:20]
    node _T_44 = neq(state, UInt<1>("h00")) @[LCDDisplay.scala 38:51]
    reg value : UInt<4>, clock with : (reset => (reset, UInt<4>("h00"))) @[Counter.scala 26:33]
    when _T_44 : @[Counter.scala 63:17]
      node _T_48 = eq(value, UInt<4>("h09")) @[Counter.scala 34:24]
      node _T_50 = add(value, UInt<1>("h01")) @[Counter.scala 35:22]
      node _T_51 = tail(_T_50, 1) @[Counter.scala 35:22]
      value <= _T_51 @[Counter.scala 35:13]
      when _T_48 : @[Counter.scala 37:21]
        value <= UInt<1>("h00") @[Counter.scala 37:29]
        skip @[Counter.scala 37:21]
      skip @[Counter.scala 63:17]
    node serialClockNegatePulse = and(_T_44, _T_48) @[Counter.scala 64:20]
    reg serialClock : UInt<1>, clock with : (reset => (reset, UInt<1>("h01"))) @[LCDDisplay.scala 39:28]
    node _T_55 = eq(state, UInt<1>("h00")) @[LCDDisplay.scala 40:15]
    node _T_56 = and(_T_55, Debounce.io.out) @[LCDDisplay.scala 40:25]
    when _T_56 : @[LCDDisplay.scala 40:39]
      serialClock <= UInt<1>("h00") @[LCDDisplay.scala 41:17]
      skip @[LCDDisplay.scala 40:39]
    else : @[LCDDisplay.scala 42:40]
      when serialClockNegatePulse : @[LCDDisplay.scala 42:40]
        node _T_58 = not(serialClock) @[LCDDisplay.scala 43:20]
        serialClock <= _T_58 @[LCDDisplay.scala 43:17]
        skip @[LCDDisplay.scala 42:40]
    wire initialCommandData : UInt<8>[4] @[LCDDisplay.scala 47:35]
    initialCommandData[0] <= UInt<8>("h00") @[LCDDisplay.scala 47:35]
    initialCommandData[1] <= UInt<8>("h00") @[LCDDisplay.scala 47:35]
    initialCommandData[2] <= UInt<8>("h00") @[LCDDisplay.scala 47:35]
    initialCommandData[3] <= UInt<8>("h00") @[LCDDisplay.scala 47:35]
    reg commandData : UInt<8>[4], clock with : (reset => (reset, initialCommandData)) @[LCDDisplay.scala 48:28]
    reg commandDataWriteIndex : UInt<2>, clock with : (reset => (reset, UInt<2>("h00"))) @[LCDDisplay.scala 49:38]
    reg commandDataSendIndex : UInt<2>, clock with : (reset => (reset, UInt<2>("h00"))) @[LCDDisplay.scala 50:37]
    inst Debounce_1 of Debounce_1 @[Debounce.scala 26:26]
    Debounce_1.clock <= clock
    Debounce_1.reset <= reset
    Debounce_1.io.in <= io.operation.command.valid @[Debounce.scala 27:20]
    when Debounce_1.io.out : @[LCDDisplay.scala 56:47]
      commandData[commandDataWriteIndex] <= io.operation.command.bits @[LCDDisplay.scala 57:40]
      node _T_108 = add(commandDataWriteIndex, UInt<1>("h01")) @[LCDDisplay.scala 58:52]
      node _T_109 = tail(_T_108, 1) @[LCDDisplay.scala 58:52]
      commandDataWriteIndex <= _T_109 @[LCDDisplay.scala 58:27]
      skip @[LCDDisplay.scala 56:47]
    inst Debounce_2 of Debounce_2 @[Debounce.scala 26:26]
    Debounce_2.clock <= clock
    Debounce_2.reset <= reset
    Debounce_2.io.in <= io.operation.reset @[Debounce.scala 27:20]
    when Debounce_2.io.out : @[LCDDisplay.scala 62:39]
      commandData[0] <= initialCommandData[0] @[LCDDisplay.scala 63:17]
      commandData[1] <= initialCommandData[1] @[LCDDisplay.scala 63:17]
      commandData[2] <= initialCommandData[2] @[LCDDisplay.scala 63:17]
      commandData[3] <= initialCommandData[3] @[LCDDisplay.scala 63:17]
      commandDataWriteIndex <= UInt<1>("h00") @[LCDDisplay.scala 64:27]
      skip @[LCDDisplay.scala 62:39]
    node stateChange = and(serialClock, serialClockNegatePulse) @[LCDDisplay.scala 70:33]
    inst sendShiftReg of ShiftRegisterPISO @[LCDDisplay.scala 72:28]
    sendShiftReg.clock <= clock
    sendShiftReg.reset <= reset
    sendShiftReg.io.d <= commandData[commandDataSendIndex] @[LCDDisplay.scala 73:21]
    sendShiftReg.io.load <= UInt<1>("h00") @[LCDDisplay.scala 74:24]
    sendShiftReg.io.enable <= UInt<1>("h00") @[LCDDisplay.scala 75:26]
    reg value_1 : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[Counter.scala 26:33]
    when stateChange : @[Counter.scala 63:17]
      node _T_119 = eq(value_1, UInt<3>("h07")) @[Counter.scala 34:24]
      node _T_121 = add(value_1, UInt<1>("h01")) @[Counter.scala 35:22]
      node _T_122 = tail(_T_121, 1) @[Counter.scala 35:22]
      value_1 <= _T_122 @[Counter.scala 35:13]
      skip @[Counter.scala 63:17]
    node sendShiftWrap = and(stateChange, _T_119) @[Counter.scala 64:20]
    node _T_123 = eq(state, UInt<1>("h00")) @[LCDDisplay.scala 78:15]
    node _T_124 = and(_T_123, Debounce.io.out) @[LCDDisplay.scala 78:25]
    when _T_124 : @[LCDDisplay.scala 78:39]
      state <= UInt<1>("h01") @[LCDDisplay.scala 79:11]
      sendShiftReg.io.load <= UInt<1>("h01") @[LCDDisplay.scala 80:26]
      node _T_127 = add(commandDataSendIndex, UInt<1>("h01")) @[LCDDisplay.scala 81:50]
      node _T_128 = tail(_T_127, 1) @[LCDDisplay.scala 81:50]
      commandDataSendIndex <= _T_128 @[LCDDisplay.scala 81:26]
      skip @[LCDDisplay.scala 78:39]
    else : @[LCDDisplay.scala 82:29]
      when stateChange : @[LCDDisplay.scala 82:29]
        when sendShiftWrap : @[LCDDisplay.scala 83:26]
          node _T_129 = eq(commandDataSendIndex, commandDataWriteIndex) @[LCDDisplay.scala 84:34]
          when _T_129 : @[LCDDisplay.scala 84:61]
            state <= UInt<1>("h00") @[LCDDisplay.scala 85:15]
            commandData[0] <= initialCommandData[0] @[LCDDisplay.scala 86:21]
            commandData[1] <= initialCommandData[1] @[LCDDisplay.scala 86:21]
            commandData[2] <= initialCommandData[2] @[LCDDisplay.scala 86:21]
            commandData[3] <= initialCommandData[3] @[LCDDisplay.scala 86:21]
            commandDataWriteIndex <= UInt<1>("h00") @[LCDDisplay.scala 87:31]
            commandDataSendIndex <= UInt<1>("h00") @[LCDDisplay.scala 88:30]
            skip @[LCDDisplay.scala 84:61]
          else : @[LCDDisplay.scala 89:20]
            sendShiftReg.io.load <= UInt<1>("h01") @[LCDDisplay.scala 90:30]
            node _T_134 = add(commandDataSendIndex, UInt<1>("h01")) @[LCDDisplay.scala 91:54]
            node _T_135 = tail(_T_134, 1) @[LCDDisplay.scala 91:54]
            commandDataSendIndex <= _T_135 @[LCDDisplay.scala 91:30]
            skip @[LCDDisplay.scala 89:20]
          skip @[LCDDisplay.scala 83:26]
        else : @[LCDDisplay.scala 93:18]
          sendShiftReg.io.enable <= UInt<1>("h01") @[LCDDisplay.scala 94:30]
          skip @[LCDDisplay.scala 93:18]
        skip @[LCDDisplay.scala 82:29]
    inst seg7LED of Seg7LED @[LCDDisplay.scala 102:23]
    seg7LED.clock <= clock
    seg7LED.reset <= reset
    node _T_137 = bits(commandData[0], 7, 4) @[LCDDisplay.scala 103:54]
    node _T_138 = bits(commandData[0], 3, 0) @[LCDDisplay.scala 103:63]
    node _T_139 = bits(commandData[1], 7, 4) @[LCDDisplay.scala 103:54]
    node _T_140 = bits(commandData[1], 3, 0) @[LCDDisplay.scala 103:63]
    node _T_141 = bits(commandData[2], 7, 4) @[LCDDisplay.scala 103:54]
    node _T_142 = bits(commandData[2], 3, 0) @[LCDDisplay.scala 103:63]
    node _T_143 = bits(commandData[3], 7, 4) @[LCDDisplay.scala 103:54]
    node _T_144 = bits(commandData[3], 3, 0) @[LCDDisplay.scala 103:63]
    seg7LED.io.digits[0] <= _T_144 @[LCDDisplay.scala 103:21]
    seg7LED.io.digits[1] <= _T_143 @[LCDDisplay.scala 103:21]
    seg7LED.io.digits[2] <= _T_142 @[LCDDisplay.scala 103:21]
    seg7LED.io.digits[3] <= _T_141 @[LCDDisplay.scala 103:21]
    seg7LED.io.digits[4] <= _T_140 @[LCDDisplay.scala 103:21]
    seg7LED.io.digits[5] <= _T_139 @[LCDDisplay.scala 103:21]
    seg7LED.io.digits[6] <= _T_138 @[LCDDisplay.scala 103:21]
    seg7LED.io.digits[7] <= _T_137 @[LCDDisplay.scala 103:21]
    io.seg7LED.anodes <= seg7LED.io.seg7led.anodes @[LCDDisplay.scala 104:14]
    io.seg7LED.decimalPoint <= seg7LED.io.seg7led.decimalPoint @[LCDDisplay.scala 104:14]
    io.seg7LED.cathodes <= seg7LED.io.seg7led.cathodes @[LCDDisplay.scala 104:14]
    node _T_145 = eq(state, UInt<1>("h00")) @[LCDDisplay.scala 106:30]
    io.lcd.chipSelect <= _T_145 @[LCDDisplay.scala 106:21]
    io.lcd.serialClock <= serialClock @[LCDDisplay.scala 107:22]
    node _T_147 = neq(commandDataSendIndex, UInt<1>("h01")) @[LCDDisplay.scala 108:46]
    io.lcd.dataCommand <= _T_147 @[LCDDisplay.scala 108:22]
    io.lcd.masterOutSlaveIn <= sendShiftReg.io.shiftOut @[LCDDisplay.scala 109:27]
    io.lcd.reset <= UInt<1>("h01") @[LCDDisplay.scala 110:16]
    io.lcd.backLight <= UInt<1>("h01") @[LCDDisplay.scala 111:20]
    

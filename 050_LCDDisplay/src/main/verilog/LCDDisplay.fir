;buildInfoPackage: chisel3, version: 3.1.8, scalaVersion: 2.11.12, sbtVersion: 1.1.1, builtAtString: 2019-07-08 17:44:42.884, builtAtMillis: 1562607882884
circuit LCDDisplay : 
  module ILI9341SPI : 
    input clock : Clock
    input reset : UInt<1>
    output io : {lcdSpi : {serialClock : UInt<1>, dataCommand : UInt<1>, chipSelectN : UInt<1>, masterOutSlaveIn : UInt<1>, flip masterInSlaveOut : UInt<1>, resetN : UInt<1>, backLight : UInt<1>}, flip sendData : {flip ready : UInt<1>, valid : UInt<1>, bits : {isData : UInt<1>, value : UInt<8>}}}
    
    reg spiClock : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[LCDDisplay.scala 26:25]
    reg sendValue : UInt<8>, clock with : (reset => (reset, UInt<8>("h00"))) @[LCDDisplay.scala 28:26]
    reg sendBitCount : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[LCDDisplay.scala 29:29]
    reg dataCommand : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[LCDDisplay.scala 30:28]
    reg state : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[LCDDisplay.scala 34:22]
    node _T_40 = eq(state, UInt<1>("h00")) @[LCDDisplay.scala 37:14]
    node _T_41 = and(_T_40, io.sendData.valid) @[LCDDisplay.scala 37:28]
    when _T_41 : @[LCDDisplay.scala 37:50]
      state <= UInt<1>("h01") @[LCDDisplay.scala 38:11]
      sendValue <= io.sendData.bits.value @[LCDDisplay.scala 39:15]
      dataCommand <= io.sendData.bits.isData @[LCDDisplay.scala 40:17]
      skip @[LCDDisplay.scala 37:50]
    else : @[LCDDisplay.scala 41:36]
      node _T_42 = eq(state, UInt<1>("h01")) @[LCDDisplay.scala 41:21]
      when _T_42 : @[LCDDisplay.scala 41:36]
        node _T_43 = not(spiClock) @[LCDDisplay.scala 42:17]
        spiClock <= _T_43 @[LCDDisplay.scala 42:14]
        when spiClock : @[LCDDisplay.scala 43:21]
          node _T_44 = bits(sendValue, 6, 0) @[LCDDisplay.scala 44:33]
          node _T_46 = cat(_T_44, UInt<1>("h00")) @[Cat.scala 30:58]
          sendValue <= _T_46 @[LCDDisplay.scala 44:17]
          node _T_48 = add(sendBitCount, UInt<1>("h01")) @[LCDDisplay.scala 45:36]
          node _T_49 = tail(_T_48, 1) @[LCDDisplay.scala 45:36]
          sendBitCount <= _T_49 @[LCDDisplay.scala 45:20]
          node _T_51 = eq(sendBitCount, UInt<3>("h07")) @[LCDDisplay.scala 46:26]
          when _T_51 : @[LCDDisplay.scala 46:35]
            when io.sendData.valid : @[LCDDisplay.scala 47:34]
              sendValue <= io.sendData.bits.value @[LCDDisplay.scala 48:21]
              dataCommand <= io.sendData.bits.isData @[LCDDisplay.scala 49:23]
              skip @[LCDDisplay.scala 47:34]
            else : @[LCDDisplay.scala 50:22]
              state <= UInt<1>("h00") @[LCDDisplay.scala 51:17]
              skip @[LCDDisplay.scala 50:22]
            skip @[LCDDisplay.scala 46:35]
          skip @[LCDDisplay.scala 43:21]
        skip @[LCDDisplay.scala 41:36]
    io.lcdSpi.serialClock <= spiClock @[LCDDisplay.scala 58:25]
    io.lcdSpi.dataCommand <= dataCommand @[LCDDisplay.scala 59:25]
    node _T_52 = neq(state, UInt<1>("h01")) @[LCDDisplay.scala 60:34]
    io.lcdSpi.chipSelectN <= _T_52 @[LCDDisplay.scala 60:25]
    node _T_53 = bits(sendValue, 7, 7) @[LCDDisplay.scala 61:42]
    io.lcdSpi.masterOutSlaveIn <= _T_53 @[LCDDisplay.scala 61:30]
    io.lcdSpi.resetN <= UInt<1>("h01") @[LCDDisplay.scala 63:20]
    io.lcdSpi.backLight <= UInt<1>("h01") @[LCDDisplay.scala 64:23]
    node _T_56 = eq(state, UInt<1>("h00")) @[LCDDisplay.scala 66:31]
    node _T_57 = eq(state, UInt<1>("h01")) @[LCDDisplay.scala 67:12]
    node _T_59 = eq(sendBitCount, UInt<3>("h07")) @[LCDDisplay.scala 67:42]
    node _T_60 = and(_T_57, _T_59) @[LCDDisplay.scala 67:26]
    node _T_61 = and(_T_60, spiClock) @[LCDDisplay.scala 67:50]
    node _T_62 = or(_T_56, _T_61) @[LCDDisplay.scala 66:46]
    io.sendData.ready <= _T_62 @[LCDDisplay.scala 66:21]
    
  module LCDDisplay : 
    input clock : Clock
    input reset : UInt<1>
    output io : {lcdSpi : {serialClock : UInt<1>, dataCommand : UInt<1>, chipSelectN : UInt<1>, masterOutSlaveIn : UInt<1>, flip masterInSlaveOut : UInt<1>, resetN : UInt<1>, backLight : UInt<1>}}
    
    wire rom : {isData : UInt<1>, value : UInt<8>}[3] @[LCDDisplay.scala 94:17]
    rom[0].isData <= UInt<1>("h00") @[LCDDisplay.scala 97:19]
    rom[0].value <= UInt<8>("h03a") @[LCDDisplay.scala 98:19]
    rom[1].isData <= UInt<1>("h01") @[LCDDisplay.scala 97:19]
    rom[1].value <= UInt<8>("h055") @[LCDDisplay.scala 98:19]
    rom[2].isData <= UInt<1>("h00") @[LCDDisplay.scala 97:19]
    rom[2].value <= UInt<8>("h02c") @[LCDDisplay.scala 98:19]
    reg programCounter : UInt<8>, clock with : (reset => (reset, UInt<8>("h00"))) @[LCDDisplay.scala 100:31]
    reg state : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[LCDDisplay.scala 103:22]
    inst ili9341Spi of ILI9341SPI @[LCDDisplay.scala 105:26]
    ili9341Spi.clock <= clock
    ili9341Spi.reset <= reset
    ili9341Spi.io.sendData.bits.isData <= UInt<1>("h00") @[LCDDisplay.scala 107:38]
    ili9341Spi.io.sendData.bits.value <= UInt<1>("h00") @[LCDDisplay.scala 108:37]
    ili9341Spi.io.sendData.valid <= UInt<1>("h00") @[LCDDisplay.scala 109:32]
    node _T_42 = dshr(UInt<11>("h07d0"), UInt<5>("h018")) @[LCDDisplay.scala 111:75]
    node _T_43 = bits(_T_42, 0, 0) @[LCDDisplay.scala 111:75]
    reg stateHoldCount : UInt<1>, clock with : (reset => (reset, _T_43)) @[LCDDisplay.scala 111:31]
    wire stateChange : UInt<1>
    stateChange <= UInt<1>("h00")
    node _T_47 = eq(state, UInt<3>("h00")) @[LCDDisplay.scala 113:15]
    node _T_48 = eq(state, UInt<3>("h01")) @[LCDDisplay.scala 113:39]
    node _T_49 = or(_T_47, _T_48) @[LCDDisplay.scala 113:30]
    node _T_50 = eq(state, UInt<3>("h02")) @[LCDDisplay.scala 113:72]
    node _T_51 = or(_T_49, _T_50) @[LCDDisplay.scala 113:63]
    when _T_51 : @[LCDDisplay.scala 113:91]
      node _T_53 = sub(stateHoldCount, UInt<1>("h01")) @[LCDDisplay.scala 114:38]
      node _T_54 = asUInt(_T_53) @[LCDDisplay.scala 114:38]
      node _T_55 = tail(_T_54, 1) @[LCDDisplay.scala 114:38]
      stateHoldCount <= _T_55 @[LCDDisplay.scala 114:20]
      node _T_57 = eq(stateHoldCount, UInt<1>("h00")) @[LCDDisplay.scala 115:35]
      stateChange <= _T_57 @[LCDDisplay.scala 115:17]
      skip @[LCDDisplay.scala 113:91]
    when stateChange : @[LCDDisplay.scala 118:22]
      node _T_58 = eq(state, UInt<3>("h00")) @[LCDDisplay.scala 119:17]
      when _T_58 : @[LCDDisplay.scala 119:33]
        state <= UInt<3>("h01") @[LCDDisplay.scala 120:13]
        stateHoldCount <= UInt<25>("h01312d00") @[LCDDisplay.scala 121:22]
        skip @[LCDDisplay.scala 119:33]
      else : @[LCDDisplay.scala 122:49]
        node _T_60 = eq(state, UInt<3>("h01")) @[LCDDisplay.scala 122:24]
        when _T_60 : @[LCDDisplay.scala 122:49]
          state <= UInt<3>("h02") @[LCDDisplay.scala 123:13]
          stateHoldCount <= UInt<20>("h0f4240") @[LCDDisplay.scala 124:22]
          ili9341Spi.io.sendData.bits.value <= UInt<8>("h011") @[LCDDisplay.scala 126:41]
          ili9341Spi.io.sendData.bits.isData <= UInt<1>("h00") @[LCDDisplay.scala 127:42]
          ili9341Spi.io.sendData.valid <= UInt<1>("h01") @[LCDDisplay.scala 128:36]
          skip @[LCDDisplay.scala 122:49]
        else : @[LCDDisplay.scala 129:43]
          node _T_64 = eq(state, UInt<3>("h02")) @[LCDDisplay.scala 129:24]
          when _T_64 : @[LCDDisplay.scala 129:43]
            state <= UInt<3>("h03") @[LCDDisplay.scala 130:13]
            skip @[LCDDisplay.scala 129:43]
      skip @[LCDDisplay.scala 118:22]
    else : @[LCDDisplay.scala 132:41]
      node _T_65 = eq(state, UInt<3>("h03")) @[LCDDisplay.scala 132:22]
      when _T_65 : @[LCDDisplay.scala 132:41]
        when ili9341Spi.io.sendData.ready : @[LCDDisplay.scala 133:41]
          node _T_67 = lt(programCounter, UInt<2>("h03")) @[LCDDisplay.scala 134:28]
          when _T_67 : @[LCDDisplay.scala 134:52]
            node _T_69 = bits(programCounter, 1, 0)
            ili9341Spi.io.sendData.bits.value <= rom[_T_69].value @[LCDDisplay.scala 135:37]
            ili9341Spi.io.sendData.bits.isData <= rom[_T_69].isData @[LCDDisplay.scala 135:37]
            ili9341Spi.io.sendData.valid <= UInt<1>("h01") @[LCDDisplay.scala 136:38]
            node _T_72 = add(programCounter, UInt<1>("h01")) @[LCDDisplay.scala 138:42]
            node _T_73 = tail(_T_72, 1) @[LCDDisplay.scala 138:42]
            programCounter <= _T_73 @[LCDDisplay.scala 138:24]
            skip @[LCDDisplay.scala 134:52]
          else : @[LCDDisplay.scala 139:9]
            state <= UInt<3>("h04") @[LCDDisplay.scala 140:15]
            skip @[LCDDisplay.scala 139:9]
          skip @[LCDDisplay.scala 133:41]
        skip @[LCDDisplay.scala 132:41]
      else : @[LCDDisplay.scala 143:37]
        node _T_74 = eq(state, UInt<3>("h04")) @[LCDDisplay.scala 143:22]
        when _T_74 : @[LCDDisplay.scala 143:37]
          when ili9341Spi.io.sendData.ready : @[LCDDisplay.scala 144:41]
            ili9341Spi.io.sendData.bits.value <= UInt<4>("h0f") @[LCDDisplay.scala 145:41]
            ili9341Spi.io.sendData.bits.isData <= UInt<1>("h01") @[LCDDisplay.scala 146:42]
            ili9341Spi.io.sendData.valid <= UInt<1>("h01") @[LCDDisplay.scala 147:36]
            skip @[LCDDisplay.scala 144:41]
          skip @[LCDDisplay.scala 143:37]
    io.lcdSpi.backLight <= ili9341Spi.io.lcdSpi.backLight @[LCDDisplay.scala 151:13]
    io.lcdSpi.resetN <= ili9341Spi.io.lcdSpi.resetN @[LCDDisplay.scala 151:13]
    ili9341Spi.io.lcdSpi.masterInSlaveOut <= io.lcdSpi.masterInSlaveOut @[LCDDisplay.scala 151:13]
    io.lcdSpi.masterOutSlaveIn <= ili9341Spi.io.lcdSpi.masterOutSlaveIn @[LCDDisplay.scala 151:13]
    io.lcdSpi.chipSelectN <= ili9341Spi.io.lcdSpi.chipSelectN @[LCDDisplay.scala 151:13]
    io.lcdSpi.dataCommand <= ili9341Spi.io.lcdSpi.dataCommand @[LCDDisplay.scala 151:13]
    io.lcdSpi.serialClock <= ili9341Spi.io.lcdSpi.serialClock @[LCDDisplay.scala 151:13]
    node _T_78 = eq(state, UInt<3>("h00")) @[LCDDisplay.scala 152:15]
    when _T_78 : @[LCDDisplay.scala 152:31]
      io.lcdSpi.resetN <= UInt<1>("h00") @[LCDDisplay.scala 153:22]
      skip @[LCDDisplay.scala 152:31]
    

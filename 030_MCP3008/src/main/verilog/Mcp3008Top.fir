;buildInfoPackage: chisel3, version: 3.1.8, scalaVersion: 2.11.12, sbtVersion: 1.1.1, builtAtString: 2019-07-08 17:44:42.884, builtAtMillis: 1562607882884
circuit Mcp3008Top : 
  module Mcp3008Interface : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip config : {flip ready : UInt<1>, valid : UInt<1>, bits : UInt<4>}, data : {valid : UInt<1>, bits : UInt<10>}, spi : {nCs : UInt<1>, sclk : UInt<1>, mosi : UInt<1>, flip miso : UInt<1>}}
    
    reg state : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[Mcp3008.scala 25:22]
    reg value : UInt<6>, clock with : (reset => (reset, UInt<6>("h00"))) @[Counter.scala 26:33]
    when UInt<1>("h01") : @[Counter.scala 63:17]
      node _T_34 = eq(value, UInt<6>("h031")) @[Counter.scala 34:24]
      node _T_36 = add(value, UInt<1>("h01")) @[Counter.scala 35:22]
      node _T_37 = tail(_T_36, 1) @[Counter.scala 35:22]
      value <= _T_37 @[Counter.scala 35:13]
      when _T_34 : @[Counter.scala 37:21]
        value <= UInt<1>("h00") @[Counter.scala 37:29]
        skip @[Counter.scala 37:21]
      skip @[Counter.scala 63:17]
    node sclkPhaseChange = and(UInt<1>("h01"), _T_34) @[Counter.scala 64:20]
    reg sclk : UInt<1>, clock with : (reset => (reset, UInt<1>("h01"))) @[Mcp3008.scala 28:21]
    node _T_41 = eq(state, UInt<3>("h00")) @[Mcp3008.scala 29:15]
    node _T_42 = and(_T_41, io.config.valid) @[Mcp3008.scala 29:25]
    when _T_42 : @[Mcp3008.scala 29:45]
      sclk <= UInt<1>("h00") @[Mcp3008.scala 30:10]
      skip @[Mcp3008.scala 29:45]
    else : @[Mcp3008.scala 31:52]
      node _T_44 = neq(state, UInt<3>("h00")) @[Mcp3008.scala 31:22]
      node _T_45 = and(_T_44, sclkPhaseChange) @[Mcp3008.scala 31:32]
      when _T_45 : @[Mcp3008.scala 31:52]
        node _T_46 = not(sclk) @[Mcp3008.scala 32:13]
        sclk <= _T_46 @[Mcp3008.scala 32:10]
        skip @[Mcp3008.scala 31:52]
    reg config : UInt<4>, clock with : (reset => (reset, UInt<4>("h00"))) @[Mcp3008.scala 36:23]
    wire _T_62 : UInt<1>[10] @[Mcp3008.scala 38:37]
    _T_62[0] <= UInt<1>("h00") @[Mcp3008.scala 38:37]
    _T_62[1] <= UInt<1>("h00") @[Mcp3008.scala 38:37]
    _T_62[2] <= UInt<1>("h00") @[Mcp3008.scala 38:37]
    _T_62[3] <= UInt<1>("h00") @[Mcp3008.scala 38:37]
    _T_62[4] <= UInt<1>("h00") @[Mcp3008.scala 38:37]
    _T_62[5] <= UInt<1>("h00") @[Mcp3008.scala 38:37]
    _T_62[6] <= UInt<1>("h00") @[Mcp3008.scala 38:37]
    _T_62[7] <= UInt<1>("h00") @[Mcp3008.scala 38:37]
    _T_62[8] <= UInt<1>("h00") @[Mcp3008.scala 38:37]
    _T_62[9] <= UInt<1>("h00") @[Mcp3008.scala 38:37]
    reg receiveValue : UInt<1>[10], clock with : (reset => (reset, _T_62)) @[Mcp3008.scala 38:29]
    reg received : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[Mcp3008.scala 39:25]
    reg sendCount : UInt<2>, clock with : (reset => (reset, UInt<2>("h00"))) @[Mcp3008.scala 44:26]
    reg receiveCount : UInt<4>, clock with : (reset => (reset, UInt<4>("h00"))) @[Mcp3008.scala 45:29]
    node changeState = and(sclkPhaseChange, sclk) @[Mcp3008.scala 47:37]
    node _T_139 = eq(state, UInt<3>("h00")) @[Mcp3008.scala 48:15]
    when _T_139 : @[Mcp3008.scala 48:26]
      when io.config.valid : @[Mcp3008.scala 49:28]
        state <= UInt<3>("h01") @[Mcp3008.scala 50:13]
        config <= io.config.bits @[Mcp3008.scala 51:14]
        received <= UInt<1>("h00") @[Mcp3008.scala 52:16]
        skip @[Mcp3008.scala 49:28]
      skip @[Mcp3008.scala 48:26]
    else : @[Mcp3008.scala 54:29]
      when changeState : @[Mcp3008.scala 54:29]
        node _T_141 = eq(state, UInt<3>("h01")) @[Mcp3008.scala 55:17]
        when _T_141 : @[Mcp3008.scala 55:29]
          state <= UInt<3>("h02") @[Mcp3008.scala 56:13]
          sendCount <= UInt<1>("h00") @[Mcp3008.scala 57:17]
          skip @[Mcp3008.scala 55:29]
        else : @[Mcp3008.scala 58:35]
          node _T_143 = eq(state, UInt<3>("h02")) @[Mcp3008.scala 58:24]
          when _T_143 : @[Mcp3008.scala 58:35]
            node _T_145 = eq(sendCount, UInt<2>("h03")) @[Mcp3008.scala 59:23]
            when _T_145 : @[Mcp3008.scala 59:32]
              state <= UInt<3>("h03") @[Mcp3008.scala 60:15]
              skip @[Mcp3008.scala 59:32]
            else : @[Mcp3008.scala 61:20]
              node _T_147 = add(sendCount, UInt<1>("h01")) @[Mcp3008.scala 62:32]
              node _T_148 = tail(_T_147, 1) @[Mcp3008.scala 62:32]
              sendCount <= _T_148 @[Mcp3008.scala 62:19]
              skip @[Mcp3008.scala 61:20]
            skip @[Mcp3008.scala 58:35]
          else : @[Mcp3008.scala 64:39]
            node _T_149 = eq(state, UInt<3>("h03")) @[Mcp3008.scala 64:24]
            when _T_149 : @[Mcp3008.scala 64:39]
              state <= UInt<3>("h04") @[Mcp3008.scala 65:13]
              skip @[Mcp3008.scala 64:39]
            else : @[Mcp3008.scala 66:38]
              node _T_150 = eq(state, UInt<3>("h04")) @[Mcp3008.scala 66:24]
              when _T_150 : @[Mcp3008.scala 66:38]
                state <= UInt<3>("h05") @[Mcp3008.scala 67:13]
                receiveCount <= UInt<1>("h00") @[Mcp3008.scala 68:20]
                skip @[Mcp3008.scala 66:38]
              else : @[Mcp3008.scala 69:38]
                node _T_152 = eq(state, UInt<3>("h05")) @[Mcp3008.scala 69:24]
                when _T_152 : @[Mcp3008.scala 69:38]
                  node _T_154 = eq(receiveCount, UInt<4>("h09")) @[Mcp3008.scala 70:26]
                  when _T_154 : @[Mcp3008.scala 70:35]
                    state <= UInt<3>("h06") @[Mcp3008.scala 71:15]
                    skip @[Mcp3008.scala 70:35]
                  else : @[Mcp3008.scala 72:20]
                    node _T_156 = add(receiveCount, UInt<1>("h01")) @[Mcp3008.scala 73:38]
                    node _T_157 = tail(_T_156, 1) @[Mcp3008.scala 73:38]
                    receiveCount <= _T_157 @[Mcp3008.scala 73:22]
                    received <= UInt<1>("h01") @[Mcp3008.scala 74:18]
                    skip @[Mcp3008.scala 72:20]
                  skip @[Mcp3008.scala 69:38]
                else : @[Mcp3008.scala 76:35]
                  node _T_159 = eq(state, UInt<3>("h06")) @[Mcp3008.scala 76:24]
                  when _T_159 : @[Mcp3008.scala 76:35]
                    state <= UInt<3>("h00") @[Mcp3008.scala 77:13]
                    skip @[Mcp3008.scala 76:35]
        skip @[Mcp3008.scala 54:29]
    node _T_160 = eq(state, UInt<3>("h05")) @[Mcp3008.scala 84:15]
    node _T_162 = eq(sclk, UInt<1>("h00")) @[Mcp3008.scala 84:50]
    node _T_163 = and(sclkPhaseChange, _T_162) @[Mcp3008.scala 84:48]
    node _T_164 = and(_T_160, _T_163) @[Mcp3008.scala 84:28]
    when _T_164 : @[Mcp3008.scala 84:58]
      receiveValue[receiveCount] <= io.spi.miso @[Mcp3008.scala 85:32]
      skip @[Mcp3008.scala 84:58]
    node _T_168 = eq(state, UInt<3>("h00")) @[Mcp3008.scala 91:28]
    io.config.ready <= _T_168 @[Mcp3008.scala 91:19]
    io.data.valid <= received @[Mcp3008.scala 93:17]
    node _T_169 = cat(receiveValue[1], receiveValue[0]) @[Mcp3008.scala 94:46]
    node _T_170 = cat(receiveValue[4], receiveValue[3]) @[Mcp3008.scala 94:46]
    node _T_171 = cat(_T_170, receiveValue[2]) @[Mcp3008.scala 94:46]
    node _T_172 = cat(_T_171, _T_169) @[Mcp3008.scala 94:46]
    node _T_173 = cat(receiveValue[6], receiveValue[5]) @[Mcp3008.scala 94:46]
    node _T_174 = cat(receiveValue[9], receiveValue[8]) @[Mcp3008.scala 94:46]
    node _T_175 = cat(_T_174, receiveValue[7]) @[Mcp3008.scala 94:46]
    node _T_176 = cat(_T_175, _T_173) @[Mcp3008.scala 94:46]
    node _T_177 = cat(_T_176, _T_172) @[Mcp3008.scala 94:46]
    node _T_178 = bits(_T_177, 7, 0) @[Bitwise.scala 109:18]
    node _T_181 = shl(UInt<4>("h0f"), 4) @[Bitwise.scala 102:47]
    node _T_182 = xor(UInt<8>("h0ff"), _T_181) @[Bitwise.scala 102:21]
    node _T_183 = shr(_T_178, 4) @[Bitwise.scala 103:21]
    node _T_184 = and(_T_183, _T_182) @[Bitwise.scala 103:31]
    node _T_185 = bits(_T_178, 3, 0) @[Bitwise.scala 103:46]
    node _T_186 = shl(_T_185, 4) @[Bitwise.scala 103:65]
    node _T_187 = not(_T_182) @[Bitwise.scala 103:77]
    node _T_188 = and(_T_186, _T_187) @[Bitwise.scala 103:75]
    node _T_189 = or(_T_184, _T_188) @[Bitwise.scala 103:39]
    node _T_190 = bits(_T_182, 5, 0) @[Bitwise.scala 102:28]
    node _T_191 = shl(_T_190, 2) @[Bitwise.scala 102:47]
    node _T_192 = xor(_T_182, _T_191) @[Bitwise.scala 102:21]
    node _T_193 = shr(_T_189, 2) @[Bitwise.scala 103:21]
    node _T_194 = and(_T_193, _T_192) @[Bitwise.scala 103:31]
    node _T_195 = bits(_T_189, 5, 0) @[Bitwise.scala 103:46]
    node _T_196 = shl(_T_195, 2) @[Bitwise.scala 103:65]
    node _T_197 = not(_T_192) @[Bitwise.scala 103:77]
    node _T_198 = and(_T_196, _T_197) @[Bitwise.scala 103:75]
    node _T_199 = or(_T_194, _T_198) @[Bitwise.scala 103:39]
    node _T_200 = bits(_T_192, 6, 0) @[Bitwise.scala 102:28]
    node _T_201 = shl(_T_200, 1) @[Bitwise.scala 102:47]
    node _T_202 = xor(_T_192, _T_201) @[Bitwise.scala 102:21]
    node _T_203 = shr(_T_199, 1) @[Bitwise.scala 103:21]
    node _T_204 = and(_T_203, _T_202) @[Bitwise.scala 103:31]
    node _T_205 = bits(_T_199, 6, 0) @[Bitwise.scala 103:46]
    node _T_206 = shl(_T_205, 1) @[Bitwise.scala 103:65]
    node _T_207 = not(_T_202) @[Bitwise.scala 103:77]
    node _T_208 = and(_T_206, _T_207) @[Bitwise.scala 103:75]
    node _T_209 = or(_T_204, _T_208) @[Bitwise.scala 103:39]
    node _T_210 = bits(_T_177, 9, 8) @[Bitwise.scala 109:44]
    node _T_211 = bits(_T_210, 0, 0) @[Bitwise.scala 109:18]
    node _T_212 = bits(_T_210, 1, 1) @[Bitwise.scala 109:44]
    node _T_213 = cat(_T_211, _T_212) @[Cat.scala 30:58]
    node _T_214 = cat(_T_209, _T_213) @[Cat.scala 30:58]
    io.data.bits <= _T_214 @[Mcp3008.scala 94:16]
    io.spi.sclk <= sclk @[Mcp3008.scala 96:15]
    node _T_215 = eq(state, UInt<3>("h00")) @[Mcp3008.scala 97:23]
    node _T_216 = eq(state, UInt<3>("h06")) @[Mcp3008.scala 97:42]
    node _T_217 = or(_T_215, _T_216) @[Mcp3008.scala 97:33]
    io.spi.nCs <= _T_217 @[Mcp3008.scala 97:14]
    io.spi.mosi <= UInt<1>("h01") @[Mcp3008.scala 99:15]
    node _T_219 = eq(state, UInt<3>("h02")) @[Mcp3008.scala 100:15]
    when _T_219 : @[Mcp3008.scala 100:26]
      node _T_220 = bits(config, 1, 0) @[Bitwise.scala 109:18]
      node _T_221 = bits(_T_220, 0, 0) @[Bitwise.scala 109:18]
      node _T_222 = bits(_T_220, 1, 1) @[Bitwise.scala 109:44]
      node _T_223 = cat(_T_221, _T_222) @[Cat.scala 30:58]
      node _T_224 = bits(config, 3, 2) @[Bitwise.scala 109:44]
      node _T_225 = bits(_T_224, 0, 0) @[Bitwise.scala 109:18]
      node _T_226 = bits(_T_224, 1, 1) @[Bitwise.scala 109:44]
      node _T_227 = cat(_T_225, _T_226) @[Cat.scala 30:58]
      node _T_228 = cat(_T_223, _T_227) @[Cat.scala 30:58]
      node _T_229 = dshr(_T_228, sendCount) @[Mcp3008.scala 101:35]
      node _T_230 = bits(_T_229, 0, 0) @[Mcp3008.scala 101:35]
      io.spi.mosi <= _T_230 @[Mcp3008.scala 101:17]
      skip @[Mcp3008.scala 100:26]
    
  module Seg7LED : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip digits : UInt<4>[8], seg7led : {cathodes : UInt<7>, decimalPoint : UInt<1>, anodes : UInt<8>}}
    
    reg value : UInt<17>, clock with : (reset => (reset, UInt<17>("h00"))) @[Counter.scala 26:33]
    when UInt<1>("h01") : @[Counter.scala 63:17]
      node _T_41 = eq(value, UInt<17>("h01869f")) @[Counter.scala 34:24]
      node _T_43 = add(value, UInt<1>("h01")) @[Counter.scala 35:22]
      node _T_44 = tail(_T_43, 1) @[Counter.scala 35:22]
      value <= _T_44 @[Counter.scala 35:13]
      when _T_41 : @[Counter.scala 37:21]
        value <= UInt<1>("h00") @[Counter.scala 37:29]
        skip @[Counter.scala 37:21]
      skip @[Counter.scala 63:17]
    node digitChange = and(UInt<1>("h01"), _T_41) @[Counter.scala 64:20]
    reg value_1 : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[Counter.scala 26:33]
    when digitChange : @[Counter.scala 63:17]
      node _T_49 = eq(value_1, UInt<3>("h07")) @[Counter.scala 34:24]
      node _T_51 = add(value_1, UInt<1>("h01")) @[Counter.scala 35:22]
      node _T_52 = tail(_T_51, 1) @[Counter.scala 35:22]
      value_1 <= _T_52 @[Counter.scala 35:13]
      skip @[Counter.scala 63:17]
    node digitWrap = and(digitChange, _T_49) @[Counter.scala 64:20]
    node _T_56 = eq(io.digits[value_1], UInt<1>("h00")) @[Seg7LED.scala 36:17]
    node _T_59 = eq(io.digits[value_1], UInt<1>("h01")) @[Seg7LED.scala 37:17]
    node _T_62 = eq(io.digits[value_1], UInt<2>("h02")) @[Seg7LED.scala 38:17]
    node _T_65 = eq(io.digits[value_1], UInt<2>("h03")) @[Seg7LED.scala 39:17]
    node _T_68 = eq(io.digits[value_1], UInt<3>("h04")) @[Seg7LED.scala 40:17]
    node _T_71 = eq(io.digits[value_1], UInt<3>("h05")) @[Seg7LED.scala 41:17]
    node _T_74 = eq(io.digits[value_1], UInt<3>("h06")) @[Seg7LED.scala 42:17]
    node _T_77 = eq(io.digits[value_1], UInt<3>("h07")) @[Seg7LED.scala 43:17]
    node _T_80 = eq(io.digits[value_1], UInt<4>("h08")) @[Seg7LED.scala 44:17]
    node _T_83 = eq(io.digits[value_1], UInt<4>("h09")) @[Seg7LED.scala 45:17]
    node _T_86 = eq(io.digits[value_1], UInt<4>("h0a")) @[Seg7LED.scala 46:17]
    node _T_89 = eq(io.digits[value_1], UInt<4>("h0b")) @[Seg7LED.scala 47:17]
    node _T_92 = eq(io.digits[value_1], UInt<4>("h0c")) @[Seg7LED.scala 48:17]
    node _T_95 = eq(io.digits[value_1], UInt<4>("h0d")) @[Seg7LED.scala 49:17]
    node _T_98 = eq(io.digits[value_1], UInt<4>("h0e")) @[Seg7LED.scala 50:17]
    node _T_101 = eq(io.digits[value_1], UInt<4>("h0f")) @[Seg7LED.scala 51:17]
    node _T_103 = mux(_T_101, UInt<4>("h0e"), UInt<7>("h07f")) @[Mux.scala 61:16]
    node _T_104 = mux(_T_98, UInt<3>("h06"), _T_103) @[Mux.scala 61:16]
    node _T_105 = mux(_T_95, UInt<6>("h021"), _T_104) @[Mux.scala 61:16]
    node _T_106 = mux(_T_92, UInt<7>("h046"), _T_105) @[Mux.scala 61:16]
    node _T_107 = mux(_T_89, UInt<2>("h03"), _T_106) @[Mux.scala 61:16]
    node _T_108 = mux(_T_86, UInt<4>("h08"), _T_107) @[Mux.scala 61:16]
    node _T_109 = mux(_T_83, UInt<5>("h010"), _T_108) @[Mux.scala 61:16]
    node _T_110 = mux(_T_80, UInt<1>("h00"), _T_109) @[Mux.scala 61:16]
    node _T_111 = mux(_T_77, UInt<7>("h058"), _T_110) @[Mux.scala 61:16]
    node _T_112 = mux(_T_74, UInt<2>("h02"), _T_111) @[Mux.scala 61:16]
    node _T_113 = mux(_T_71, UInt<5>("h012"), _T_112) @[Mux.scala 61:16]
    node _T_114 = mux(_T_68, UInt<5>("h019"), _T_113) @[Mux.scala 61:16]
    node _T_115 = mux(_T_65, UInt<6>("h030"), _T_114) @[Mux.scala 61:16]
    node _T_116 = mux(_T_62, UInt<6>("h024"), _T_115) @[Mux.scala 61:16]
    node _T_117 = mux(_T_59, UInt<7>("h079"), _T_116) @[Mux.scala 61:16]
    node _T_118 = mux(_T_56, UInt<7>("h040"), _T_117) @[Mux.scala 61:16]
    io.seg7led.cathodes <= _T_118 @[Seg7LED.scala 34:23]
    reg anodes : UInt<8>, clock with : (reset => (reset, UInt<8>("h0fe"))) @[Seg7LED.scala 53:23]
    when digitChange : @[Seg7LED.scala 54:22]
      node _T_121 = bits(anodes, 6, 0) @[Seg7LED.scala 56:25]
      node _T_122 = bits(anodes, 7, 7) @[Seg7LED.scala 56:39]
      node _T_123 = cat(_T_121, _T_122) @[Cat.scala 30:58]
      anodes <= _T_123 @[Seg7LED.scala 56:12]
      skip @[Seg7LED.scala 54:22]
    io.seg7led.anodes <= anodes @[Seg7LED.scala 58:21]
    io.seg7led.decimalPoint <= UInt<1>("h01") @[Seg7LED.scala 60:27]
    
  module Mcp3008Top : 
    input clock : Clock
    input reset : UInt<1>
    output io : {spi : {nCs : UInt<1>, sclk : UInt<1>, mosi : UInt<1>, flip miso : UInt<1>}, seg7led : {cathodes : UInt<7>, decimalPoint : UInt<1>, anodes : UInt<8>}}
    
    reg value : UInt<27>, clock with : (reset => (reset, UInt<27>("h00"))) @[Counter.scala 26:33]
    when UInt<1>("h01") : @[Counter.scala 63:17]
      node _T_23 = eq(value, UInt<27>("h05f5e0ff")) @[Counter.scala 34:24]
      node _T_25 = add(value, UInt<1>("h01")) @[Counter.scala 35:22]
      node _T_26 = tail(_T_25, 1) @[Counter.scala 35:22]
      value <= _T_26 @[Counter.scala 35:13]
      when _T_23 : @[Counter.scala 37:21]
        value <= UInt<1>("h00") @[Counter.scala 37:29]
        skip @[Counter.scala 37:21]
      skip @[Counter.scala 63:17]
    node measureSig = and(UInt<1>("h01"), _T_23) @[Counter.scala 64:20]
    inst mcp3008Interface of Mcp3008Interface @[Mcp3008Top.scala 18:32]
    mcp3008Interface.clock <= clock
    mcp3008Interface.reset <= reset
    wire configValue : UInt<4>
    configValue <= UInt<4>("h08")
    mcp3008Interface.io.config.bits <= configValue @[Mcp3008Top.scala 21:35]
    node _T_30 = and(mcp3008Interface.io.config.ready, measureSig) @[Mcp3008Top.scala 22:72]
    mcp3008Interface.io.config.valid <= _T_30 @[Mcp3008Top.scala 22:36]
    mcp3008Interface.io.spi.miso <= io.spi.miso @[Mcp3008Top.scala 24:10]
    io.spi.mosi <= mcp3008Interface.io.spi.mosi @[Mcp3008Top.scala 24:10]
    io.spi.sclk <= mcp3008Interface.io.spi.sclk @[Mcp3008Top.scala 24:10]
    io.spi.nCs <= mcp3008Interface.io.spi.nCs @[Mcp3008Top.scala 24:10]
    inst seg7led of Seg7LED @[Mcp3008Top.scala 29:23]
    seg7led.clock <= clock
    seg7led.reset <= reset
    wire _T_42 : UInt<4>[8] @[Mcp3008Top.scala 31:31]
    _T_42[0] <= UInt<4>("h00") @[Mcp3008Top.scala 31:31]
    _T_42[1] <= UInt<4>("h00") @[Mcp3008Top.scala 31:31]
    _T_42[2] <= UInt<4>("h00") @[Mcp3008Top.scala 31:31]
    _T_42[3] <= UInt<4>("h00") @[Mcp3008Top.scala 31:31]
    _T_42[4] <= UInt<4>("h00") @[Mcp3008Top.scala 31:31]
    _T_42[5] <= UInt<4>("h00") @[Mcp3008Top.scala 31:31]
    _T_42[6] <= UInt<4>("h00") @[Mcp3008Top.scala 31:31]
    _T_42[7] <= UInt<4>("h00") @[Mcp3008Top.scala 31:31]
    seg7led.io.digits[0] <= _T_42[0] @[Mcp3008Top.scala 31:21]
    seg7led.io.digits[1] <= _T_42[1] @[Mcp3008Top.scala 31:21]
    seg7led.io.digits[2] <= _T_42[2] @[Mcp3008Top.scala 31:21]
    seg7led.io.digits[3] <= _T_42[3] @[Mcp3008Top.scala 31:21]
    seg7led.io.digits[4] <= _T_42[4] @[Mcp3008Top.scala 31:21]
    seg7led.io.digits[5] <= _T_42[5] @[Mcp3008Top.scala 31:21]
    seg7led.io.digits[6] <= _T_42[6] @[Mcp3008Top.scala 31:21]
    seg7led.io.digits[7] <= _T_42[7] @[Mcp3008Top.scala 31:21]
    when mcp3008Interface.io.data.valid : @[Mcp3008Top.scala 32:41]
      node _T_53 = bits(mcp3008Interface.io.data.bits, 3, 0) @[Mcp3008Top.scala 34:58]
      seg7led.io.digits[0] <= _T_53 @[Mcp3008Top.scala 34:26]
      node _T_54 = bits(mcp3008Interface.io.data.bits, 7, 4) @[Mcp3008Top.scala 35:58]
      seg7led.io.digits[1] <= _T_54 @[Mcp3008Top.scala 35:26]
      node _T_56 = bits(mcp3008Interface.io.data.bits, 9, 8) @[Mcp3008Top.scala 36:73]
      node _T_57 = cat(UInt<2>("h00"), _T_56) @[Cat.scala 30:58]
      seg7led.io.digits[2] <= _T_57 @[Mcp3008Top.scala 36:26]
      skip @[Mcp3008Top.scala 32:41]
    io.seg7led.anodes <= seg7led.io.seg7led.anodes @[Mcp3008Top.scala 39:14]
    io.seg7led.decimalPoint <= seg7led.io.seg7led.decimalPoint @[Mcp3008Top.scala 39:14]
    io.seg7led.cathodes <= seg7led.io.seg7led.cathodes @[Mcp3008Top.scala 39:14]
    
